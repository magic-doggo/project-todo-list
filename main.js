(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>c});var r=n(354),o=n.n(r),i=n(314),d=n.n(i)()(o());d.push([e.id,"/* * {\n    border: 2px solid red;\n} */\n\nbody {\n    height: 100vh;\n    display: grid;\n    grid-template-columns: 2fr 9fr;\n}\n\n.sidebar {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px 5px;\n    background-color: #949398FF;\n    color: #F4DF4EFF;\n    font-weight: bolder;\n}\n\n.sidebar > button {\n    border-radius: 15px;\n    border: none;\n    outline: none;\n    cursor: pointer;\n    padding: 12px 12px;\n}\n\n.sidebar > p {\n    margin: 0px;\n}\n\n#projects {\n    height: 100px;\n}\n\n.selected {\n    background-color: burlywood;\n}\n\n#main {\n    background-color: #F4DF4EFF;\n}\n\n#tasks-container {\n    padding: 10px 5px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.task {\n    display: grid;\n    border: 2px solid black;\n    box-shadow: 2px 4px 2px gray;\n}\n\n#dialog {\n    width: 50%;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;GAEG;;AAEH;IACI,aAAa;IACb,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,iBAAiB;IACjB,2BAA2B;IAC3B,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,aAAa;IACb,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,4BAA4B;AAChC;;AAEA;IACI,UAAU;AACd",sourcesContent:["/* * {\n    border: 2px solid red;\n} */\n\nbody {\n    height: 100vh;\n    display: grid;\n    grid-template-columns: 2fr 9fr;\n}\n\n.sidebar {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px 5px;\n    background-color: #949398FF;\n    color: #F4DF4EFF;\n    font-weight: bolder;\n}\n\n.sidebar > button {\n    border-radius: 15px;\n    border: none;\n    outline: none;\n    cursor: pointer;\n    padding: 12px 12px;\n}\n\n.sidebar > p {\n    margin: 0px;\n}\n\n#projects {\n    height: 100px;\n}\n\n.selected {\n    background-color: burlywood;\n}\n\n#main {\n    background-color: #F4DF4EFF;\n}\n\n#tasks-container {\n    padding: 10px 5px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.task {\n    display: grid;\n    border: 2px solid black;\n    box-shadow: 2px 4px 2px gray;\n}\n\n#dialog {\n    width: 50%;\n}"],sourceRoot:""}]);const c=d},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var d={};if(r)for(var c=0;c<this.length;c++){var a=this[c][0];null!=a&&(d[a]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&d[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},d=[],c=0;c<e.length;c++){var a=e[c],l=r.base?a[0]+r.base:a[0],s=i[l]||0,p="".concat(l," ").concat(s);i[l]=s+1;var u=n(p),m={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var A=o(m,r);r.byIndex=c,t.splice(c,0,{identifier:p,updater:A,references:1})}d.push(p)}return d}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var d=0;d<i.length;d++){var c=n(i[d]);t[c].references--}for(var a=r(e,o),l=0;l<i.length;l++){var s=n(i[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=a}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var r={};(()=>{n.d(r,{x:()=>E,K:()=>B});class e{constructor(e,t,n,r,o){this._title=e,this._description=t,this._dueDate=n,this._priority=r,this._project=o}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get project(){return this._project}}let t=0;document.getElementById("main");class o{constructor(e){this._projectName=e}get projectName(){return this._projectName}}let i=function(){let e=document.getElementsByClassName("selected");for(;e[0];)e[0].classList.remove("selected")},d=(document.querySelectorAll(".project"),function(e){let t=0;const n=document.getElementById("projects");for(;n.firstChild;)n.removeChild(n.firstChild);const r=document.getElementById("project");for(;r.childNodes.length>1;)r.removeChild(r.lastChild);for(let o in B){let o=document.createElement("li");n.appendChild(o),o.classList.add("project"),o.innerHTML=e[t].projectName;let i=document.createElement("option");r.appendChild(i),i.innerHTML=e[t].projectName,t++}!function(){let e;document.querySelectorAll(".project").forEach((t=>{t.addEventListener("click",(function(n){i(),t.classList.add("selected");let r=0,o=document.getElementById("tasks-container");for(;o.firstChild;)o.removeChild(o.firstChild);e=t.innerText;for(let t in E){if(e==E[r].project){let e=document.createElement("div");document.getElementById("tasks-container").appendChild(e),e.classList.add("task");let t=document.createElement("div");e.appendChild(t),t.innerHTML="Title: "+E[r].title;let n=document.createElement("div");e.appendChild(n),n.innerHTML="Description: "+E[r].description;let o=document.createElement("div");e.appendChild(o),o.innerHTML="Due Date: "+E[r].dueDate;let i=document.createElement("div");e.appendChild(i),i.innerHTML="Priority: "+E[r].priority;let d=document.createElement("div");e.appendChild(d),d.innerHTML="Project: "+E[r].project}r++}}))}))}()});var c=n(72),a=n.n(c),l=n(825),s=n.n(l),p=n(659),u=n.n(p),m=n(56),A=n.n(m),f=n(540),h=n.n(f),g=n(113),v=n.n(g),y=n(208),C={};C.styleTagTransform=v(),C.setAttributes=A(),C.insert=u().bind(null,"head"),C.domAPI=s(),C.insertStyleElement=h(),a()(y.A,C),y.A&&y.A.locals&&y.A.locals,console.log("12345");let E={},B=[];const I=document.getElementById("new-todo"),x=document.getElementById("dialog"),b=document.getElementById("cancel-Btn"),j=document.getElementById("confirm-Btn"),k=document.getElementById("form"),L=document.getElementById("all-tasks"),T=document.getElementById("create-new-project");let M=document.getElementById("project-form"),w=document.getElementById("tasks-container");I.addEventListener("click",(()=>{x.showModal()})),b.addEventListener("click",(()=>{x.close("test cancel string where do i see this")})),j.addEventListener("click",(function(){let n=document.getElementById("title").value,r=document.getElementById("description").value,o=document.getElementById("due-date").value,i=document.getElementById("priority").value,d=document.getElementById("project").value,c=new e(n,r,o,i,d);return!0===k.checkValidity()&&(function(e,n){n[t]=e,t++}(c,E),console.log(E),function(e,t){if(null==t.firstChild||e.project==t.firstChild.lastChild.innerText){let t=document.createElement("div");document.getElementById("tasks-container").appendChild(t),t.classList.add("task");let n=document.createElement("div");t.appendChild(n),n.innerHTML=e.title;let r=document.createElement("div");t.appendChild(r),r.innerHTML=e.description;let o=document.createElement("div");t.appendChild(o),o.innerHTML=e.dueDate;let i=document.createElement("div");t.appendChild(i),i.innerHTML=e.priority;let d=document.createElement("div");t.appendChild(d),d.innerHTML=e.project}}(c,w),document.querySelector("form").reset(),x.close(),document.getElementById("title").required=!1),c})),I.addEventListener("click",(()=>{x.showModal(),document.getElementById("title").required=!0})),L.addEventListener("click",(()=>{i(),L.classList.add("selected"),function(){let e=0;const t=document.getElementById("tasks-container");for(;t.firstChild;)t.removeChild(t.firstChild);for(let t in E){let t=document.createElement("div");document.getElementById("tasks-container").appendChild(t),t.classList.add("task");let n=document.createElement("div");t.appendChild(n),n.innerHTML=E[e].title;let r=document.createElement("div");t.appendChild(r),r.innerHTML=E[e].description;let o=document.createElement("div");t.appendChild(o),o.innerHTML=E[e].dueDate;let i=document.createElement("div");t.appendChild(i),i.innerHTML=E[e].priority;let d=document.createElement("div");t.appendChild(d),d.innerHTML=E[e].project,e++}}()})),T.addEventListener("click",(function(e){let t=document.getElementById("new-project").value;if(!0===M.checkValidity()){e.preventDefault();let n=new o(t);B.push(n),console.log(B),document.getElementById("project-form").reset(),d(B)}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,