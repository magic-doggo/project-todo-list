(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(354),o=n.n(r),i=n(314),d=n.n(i)()(o());d.push([e.id,"/* * {\n    border: 2px solid red;\n} */\n\nbody {\n    height: 100vh;\n    display: grid;\n    grid-template-columns: 2fr 9fr;\n}\n\n.sidebar {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 20px 10px;\n    background-color: #949398FF;\n    color: #F4DF4EFF;\n    font-weight: bolder;\n    border: 1px solid black;\n    text-shadow: 1px 1px 1px black;\n    font-size: larger;\n}\n\nbutton {\n    border-radius: 15px;\n    border: none;\n    outline: none;\n    cursor: pointer;\n    padding: 12px 12px;\n    background-color: #F4DF4EFF;\n    box-shadow: 1px 1px 1px black;\n}\n\nform > button {\n    border-radius: 10px;\n    padding: 5px 10px;\n    margin: 5px;\n}\n\n.sidebar > p {\n    margin: 0px;\n}\n\n#projects {\n    height: 100px;\n}\n\n.selected {\n    background-color: burlywood;\n}\n\n#main {\n    background-color: #F4DF4EFF;\n}\n\n#tasks-container {\n    padding: 10px 5px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    margin: 10px;\n}\n\n.task {\n    display: grid;\n    border: 2px solid black;\n    box-shadow: 2px 4px 2px gray;\n    padding: 12px;\n}\n\n#dialog {\n    width: 50%;\n    background-color: rgb(255, 249, 240);\n    text-shadow: none;\n}\n\n#form > ul {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.delete-me {\n    background-color: #949398FF;\n    width: 15%;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;GAEG;;AAEH;IACI,aAAa;IACb,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,kBAAkB;IAClB,2BAA2B;IAC3B,gBAAgB;IAChB,mBAAmB;IACnB,uBAAuB;IACvB,8BAA8B;IAC9B,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,aAAa;IACb,eAAe;IACf,kBAAkB;IAClB,2BAA2B;IAC3B,6BAA6B;AACjC;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,4BAA4B;IAC5B,aAAa;AACjB;;AAEA;IACI,UAAU;IACV,oCAAoC;IACpC,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,2BAA2B;IAC3B,UAAU;AACd",sourcesContent:["/* * {\n    border: 2px solid red;\n} */\n\nbody {\n    height: 100vh;\n    display: grid;\n    grid-template-columns: 2fr 9fr;\n}\n\n.sidebar {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 20px 10px;\n    background-color: #949398FF;\n    color: #F4DF4EFF;\n    font-weight: bolder;\n    border: 1px solid black;\n    text-shadow: 1px 1px 1px black;\n    font-size: larger;\n}\n\nbutton {\n    border-radius: 15px;\n    border: none;\n    outline: none;\n    cursor: pointer;\n    padding: 12px 12px;\n    background-color: #F4DF4EFF;\n    box-shadow: 1px 1px 1px black;\n}\n\nform > button {\n    border-radius: 10px;\n    padding: 5px 10px;\n    margin: 5px;\n}\n\n.sidebar > p {\n    margin: 0px;\n}\n\n#projects {\n    height: 100px;\n}\n\n.selected {\n    background-color: burlywood;\n}\n\n#main {\n    background-color: #F4DF4EFF;\n}\n\n#tasks-container {\n    padding: 10px 5px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    margin: 10px;\n}\n\n.task {\n    display: grid;\n    border: 2px solid black;\n    box-shadow: 2px 4px 2px gray;\n    padding: 12px;\n}\n\n#dialog {\n    width: 50%;\n    background-color: rgb(255, 249, 240);\n    text-shadow: none;\n}\n\n#form > ul {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.delete-me {\n    background-color: #949398FF;\n    width: 15%;\n}"],sourceRoot:""}]);const a=d},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var d={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(d[c]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&d[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},d=[],a=0;a<e.length;a++){var c=e[a],l=r.base?c[0]+r.base:c[0],s=i[l]||0,p="".concat(l," ").concat(s);i[l]=s+1;var u=n(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var m=o(A,r);r.byIndex=a,t.splice(a,0,{identifier:p,updater:m,references:1})}d.push(p)}return d}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var d=0;d<i.length;d++){var a=n(i[d]);t[a].references--}for(var c=r(e,o),l=0;l<i.length;l++){var s=n(i[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=c}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var r={};(()=>{n.d(r,{x:()=>b,K:()=>y});class e{constructor(e,t,n,r,o){this._title=e,this._description=t,this._dueDate=n,this._priority=r,this._project=o}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get project(){return this._project}}document.getElementById("main");const t=function(){let e=0;const n=document.getElementById("tasks-container");for(;n.firstChild;)n.removeChild(n.firstChild);for(let o in b){var r=document.createElement("div");document.getElementById("tasks-container").appendChild(r),r.classList.add("task");let i=document.createElement("div");r.appendChild(i),i.innerHTML="Title: "+Object.values(b)[e]._title,i.classList.add("title");let d=document.createElement("div");r.appendChild(d),d.innerHTML="Description: "+Object.values(b)[e]._description,d.classList.add("description");let a=document.createElement("div");r.appendChild(a),a.innerHTML="DueDate: "+Object.values(b)[e]._dueDate,a.classList.add("due-date");let c=document.createElement("div");r.appendChild(c),c.innerHTML="Priority: "+Object.values(b)[e]._priority,c.classList.add("priority");let l=document.createElement("div");r.appendChild(l),l.innerHTML="Project: "+Object.values(b)[e]._project,l.classList.add("project");let s=document.createElement("button");function p(){delete b[o],t()}r.appendChild(s),s.innerHTML="Delete me",s.classList.add("delete-me"),s.addEventListener("click",p),e++}return r};class o{constructor(e){this._projectName=e}get projectName(){return this._projectName}}let i=function(){let e=document.getElementsByClassName("selected");for(;e[0];)e[0].classList.remove("selected")},d=(document.querySelectorAll(".project"),function(e){let t=0;const n=document.getElementById("projects");for(;n.firstChild;)n.removeChild(n.firstChild);const r=document.getElementById("project");for(;r.childNodes.length>1;)r.removeChild(r.lastChild);for(let o in y){let o=document.createElement("li");n.appendChild(o),o.classList.add("project"),o.innerHTML=e[t]._projectName;let i=document.createElement("option");r.appendChild(i),i.innerHTML=e[t]._projectName,t++}!function(){let e;document.querySelectorAll(".project").forEach((t=>{t.addEventListener("click",(function(n){i(),t.classList.add("selected");let r=0,o=document.getElementById("tasks-container");for(;o.firstChild;)o.removeChild(o.firstChild);e=t.innerText;for(let d in b){if(e==b[r]._project){let a=document.createElement("div");document.getElementById("tasks-container").appendChild(a),a.classList.add("task");let c=document.createElement("div");a.appendChild(c),c.innerHTML="Title: "+Object.values(b)[r]._title;let l=document.createElement("div");a.appendChild(l),l.innerHTML="Description: "+Object.values(b)[r]._description;let s=document.createElement("div");a.appendChild(s),s.innerHTML="DueDate: "+Object.values(b)[r]._dueDate;let p=document.createElement("div");a.appendChild(p),p.innerHTML="Priority: "+Object.values(b)[r]._priority;let u=document.createElement("div");a.appendChild(u),u.innerHTML="Project: "+Object.values(b)[r]._project;let A=document.createElement("button");function m(){delete b[toDo],showAllTasks()}a.appendChild(A),A.innerHTML="Delete me",A.classList.add("delete-me"),A.addEventListener("click",m)}r++}}))}))}()});var a=n(72),c=n.n(a),l=n(825),s=n.n(l),p=n(659),u=n.n(p),A=n(56),m=n.n(A),f=n(540),g=n.n(f),h=n(113),v=n.n(h),C=n(208),B={};let b,y;if(B.styleTagTransform=v(),B.setAttributes=m(),B.insert=u().bind(null,"head"),B.domAPI=s(),B.insertStyleElement=g(),c()(C.A,B),C.A&&C.A.locals&&C.A.locals,null==localStorage.getItem("testKey"))b=[];else{let e=window.localStorage.getItem("testKey");b=JSON.parse(e)}if(null==localStorage.getItem("storedProjectList"))y=[];else{let e=window.localStorage.getItem("storedProjectList");y=JSON.parse(e),console.log(y),console.log(e)}const I=document.getElementById("new-todo"),x=document.getElementById("dialog"),E=document.getElementById("cancel-Btn"),j=document.getElementById("confirm-Btn"),L=document.getElementById("form"),k=document.getElementById("all-tasks"),w=document.getElementById("create-new-project");let T=document.getElementById("project-form");document.getElementById("tasks-container"),I.addEventListener("click",(()=>{x.showModal()})),E.addEventListener("click",(()=>{x.close("test cancel string where do i see this")})),j.addEventListener("click",(function(){let n=document.getElementById("title").value;const r=document.getElementById("description").value;let o=document.getElementById("due-date").value,i=document.getElementById("priority").value,d=document.getElementById("project").value,a=new e(n,r,o,i,d);return!0===L.checkValidity()&&(b.push(a),window.localStorage.setItem("testKey",JSON.stringify(b)),console.log(b),console.log(typeof b),window.localStorage.getItem("testKey"),function(e){let n=document.getElementsByClassName("selected");if("All To-Dos"==n[0].innerHTML)t();else if(e.project==n[0].innerHTML){const r=document.getElementById("tasks-container");for(;r.firstChild;)r.removeChild(r.firstChild);for(let o in b)if(Object.values(b)[o].project==n[0].innerHTML){let i=document.createElement("div");document.getElementById("tasks-container").appendChild(i),i.classList.add("task");let d=document.createElement("div");i.appendChild(d),d.innerHTML="Title: "+Object.values(b)[o]._title,d.classList.add("title");let a=document.createElement("div");i.appendChild(a),a.innerHTML="Description: "+Object.values(b)[o]._description,a.classList.add("description");let c=document.createElement("div");i.appendChild(c),c.innerHTML="DueDate: "+Object.values(b)[o]._dueDate,c.classList.add("due-date");let l=document.createElement("div");i.appendChild(l),l.innerHTML="Priority: "+Object.values(b)[o]._priority,l.classList.add("priority");let s=document.createElement("div");i.appendChild(s),s.innerHTML="Project: "+Object.values(b)[o]._project,s.classList.add("project");let p=document.createElement("button");function u(){delete b[o],t()}i.appendChild(p),p.innerHTML="Delete me",p.classList.add("delete-me"),p.addEventListener("click",u)}}}(a),document.querySelector("form").reset(),x.close(),document.getElementById("title").required=!1),a})),I.addEventListener("click",(()=>{x.showModal(),document.getElementById("title").required=!0})),k.addEventListener("click",(()=>{i(),k.classList.add("selected"),t()})),w.addEventListener("click",(function(e){let t=document.getElementById("new-project").value;if(!0===T.checkValidity()){e.preventDefault();let n=new o(t);y.push(n),window.localStorage.setItem("storedProjectList",JSON.stringify(y)),document.getElementById("project-form").reset(),d(y)}})),d(y),t()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,