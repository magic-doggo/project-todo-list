(()=>{"use strict";var e={d:(t,n)=>{for(var d in n)e.o(n,d)&&!e.o(t,d)&&Object.defineProperty(t,d,{enumerable:!0,get:n[d]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{x:()=>i,K:()=>l});class t{constructor(e,t,n,d,i){this._title=e,this._description=t,this._dueDate=n,this._priority=d,this._project=i}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get project(){return this._project}}let n=0;document.getElementById("main");class d{constructor(e){this._projectName=e}get projectName(){return this._projectName}}document.querySelectorAll(".project");console.log("12345");let i={},l=[];const c=document.getElementById("new-todo"),r=document.getElementById("dialog"),o=document.getElementById("cancel-Btn"),m=document.getElementById("confirm-Btn"),a=document.getElementById("form"),s=document.getElementById("all-tasks"),u=document.getElementById("create-new-project");let p=document.getElementById("project-form"),h=document.getElementById("tasks-container");c.addEventListener("click",(()=>{r.showModal()})),o.addEventListener("click",(()=>{r.close("test cancel string where do i see this")})),m.addEventListener("click",(function(){let e=document.getElementById("title").value,d=document.getElementById("description").value,l=document.getElementById("due-date").value,c=document.getElementById("priority").value,o=document.getElementById("project").value,m=new t(e,d,l,c,o);return!0===a.checkValidity()&&(function(e,t){t[n]=e,n++}(m,i),console.log(i),function(e,t){if(null==t.firstChild||e.project==t.firstChild.lastChild.innerText){let t=document.createElement("div");document.getElementById("tasks-container").appendChild(t),t.classList.add("task");let n=document.createElement("div");t.appendChild(n),n.innerHTML=e.title;let d=document.createElement("div");t.appendChild(d),d.innerHTML=e.description;let i=document.createElement("div");t.appendChild(i),i.innerHTML=e.dueDate;let l=document.createElement("div");t.appendChild(l),l.innerHTML=e.priority;let c=document.createElement("div");t.appendChild(c),c.innerHTML=e.project}}(m,h),document.querySelector("form").reset(),r.close(),document.getElementById("title").required=!1),m})),c.addEventListener("click",(()=>{r.showModal(),document.getElementById("title").required=!0})),s.addEventListener("click",(()=>{!function(){let e=0;const t=document.getElementById("tasks-container");for(;t.firstChild;)t.removeChild(t.firstChild);for(let t in i){let t=document.createElement("div");document.getElementById("tasks-container").appendChild(t),t.classList.add("task");let n=document.createElement("div");t.appendChild(n),n.innerHTML=i[e].title;let d=document.createElement("div");t.appendChild(d),d.innerHTML=i[e].description;let l=document.createElement("div");t.appendChild(l),l.innerHTML=i[e].dueDate;let c=document.createElement("div");t.appendChild(c),c.innerHTML=i[e].priority;let r=document.createElement("div");t.appendChild(r),r.innerHTML=i[e].project,e++}}()})),u.addEventListener("click",(function(e){let t=document.getElementById("new-project").value;if(!0===p.checkValidity()){e.preventDefault();let n=new d(t);l.push(n),console.log(l),document.getElementById("project-form").reset(),function(e){let t=0;const n=document.getElementById("projects");for(;n.firstChild;)n.removeChild(n.firstChild);const d=document.getElementById("project");for(;d.childNodes.length>1;)d.removeChild(d.lastChild);for(let i in l){let i=document.createElement("div");n.appendChild(i),i.classList.add("project"),i.innerHTML=e[t].projectName;let l=document.createElement("option");d.appendChild(l),l.innerHTML=e[t].projectName,t++}!function(){let e;document.querySelectorAll(".project").forEach((t=>{t.addEventListener("click",(function(n){let d=0,l=document.getElementById("tasks-container");for(;l.firstChild;)l.removeChild(l.firstChild);e=t.innerText;for(let t in i){if(e==i[d].project){let e=document.createElement("div");document.getElementById("tasks-container").appendChild(e),e.classList.add("task");let t=document.createElement("div");e.appendChild(t),t.innerHTML=i[d].title;let n=document.createElement("div");e.appendChild(n),n.innerHTML=i[d].description;let l=document.createElement("div");e.appendChild(l),l.innerHTML=i[d].dueDate;let c=document.createElement("div");e.appendChild(c),c.innerHTML=i[d].priority;let r=document.createElement("div");e.appendChild(r),r.innerHTML=i[d].project}d++}}))}))}()}(l)}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,